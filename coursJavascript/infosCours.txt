NODE.JS DETAILS
* nodejs permet d'executer du js
* pour verifier qu'on a installer node.js on tape dans le terminal la commande : node --version
* pour executer notre code js on tape dans le termi node <nom du fichier>.<extension>

UTILISATION DE quokka
* quokka permet d'executer du js directement sans passer apr le terminal
* pour activer quokka on fait ctrl+shift+P et on tape quokka.js : start on current file

COURS SUR LE JS MEME
* pour afficher en js c'est : console.log("Texte");
* pour declarer des variables c'est : let (on peut egalement utiliser var mais il est vieux et plus beaucoup utiliser)
    exple1 : let name = "Kaleb"
    exple2 : let age = 25
*pour declarer une constante (variable non modifiable) en js c'est : constante
    exple : const pi = 3.14
*pour concatener on peut utiliser + ou ,
    exple1 : console.log("Nom: " + name)
    exple2 : console.log("Nom: " , name)
*lorsque lors de son utilisation une variable est barre cela signifie que ce nom de variable est reserver 
et qu'il faut le changer pour eviter les problÃ¨mes.
*les types de donnees en js sont :
    _ String pour les chaine de cara
    _ boolean 
    _ number 
    _ bigInt pour stocker les nombres trop grands
    _ symbol un caractere
    _ null un variable qui dit qu'il n'y a rien 
    _ undefined pas definit
* pour declarer une string on peut utiliser trois symbols : "" , '', ``
* le `` permet de concatener de maniere plus optimal : soit deux let nom = "kaka";
    _ facon classique : let add = "Bonjour" + nom
    _ facon optimale : let add = "Bonjour ${nom}"
* pour recuperer le premier cara d'un string : let first = nom[0] (nom etant le nom de la var string)
* pour recuperer la longueur d'un string : nom.length
* pour verifier si un mot se trouve dans un chaine : nom.include("le mot")
*les fonction String() et Number() permettent de transformer soit en string soit en Number
*en js le chaine rempli et les nombres non nuls sont true et le reste est false
*pour declarer une fonction : function nom(){} ou cont nom = (parametre) =>{} (c'est une arrow function)
*on peut egalement affecter au contenue d'une constante une fonction : const exple = diviser(2,3); 
(diviser est la fonction bien attendu)
*pour declarer un tableau let nom = [] (en js on ne peut pas declarer de tableau multi de facon classique)

IMPORTANT LES OBJTES ET TABLEAU EN JAVASCRIPT
*declarer un objet en js : const obj = {name: "Kaleb", age: 18} (ici ce tableau contient donc deux elements de
types differens c'est la force de js)
*maintenant essayons de modifier cet objet : obj.name = "giannio" (on a modifier l'attribut nom de notre objet tab)
*pour recuperer les cles(noms des attributs) : Object.keys(obj);
*pour recuperer toutes les valeurs d'un objet : Object.values(obj);
*timecode si un jour j'en ai besoin : 2h06m27s
*pour dupliquer un objet sans dupliquer la reference : let obj2 = {...obj}
*on peut destructurer des objet comme avec les tableux : let {taille} = obj (ici c'est des {} et non des [])
//
*declarer un tableau en js : const tab = ["bonjours","Kaleb"]; (ici c'est tableau a contenant deux choses)
*pour modifer un tableau : tab[0] = "Salut"; (ici on utilise plutot l'indice comme avec un tableau classique)
*en declarant un autre tableau comme ceci : let tab2 = tab; toutes modifications apporter sur l'un des TABLEAU
affectera egalement l'autre : c'est le principe de type de reference car un tableau ne contient pas des valeurs
mais des adresses
*avec const on ne peut pas changer les references mais seulement les contenues alors qu'avec let on peut tout 
changer
*on peut faire let [n1,n2,n3,...n4] = tab : c'est ce qu'on appelle la deconstruction et les n1,n2 sont en fait des variables
qui vont recuperer individuellemnt les valeurs du premier puis second index de tab et ainsi de suite
(ici ...n4 se charge de recuperer tout les autres valeurs des index qui restent et de les mettre dans un tableau)
*pour ajouter un element a la fin d'un tableau : tab.push("ce que tu veux");
*pour ajouter un element au debut d'un tableau : tab.unshift("ce que tu veux");
*pour supprimer le premier element d'un tableau : tab.shift();
*pour supprimer le dernier element d'un tableau : tab.pop();
NB : on peut evidement creer un tableau d'objets : let users = [{nom:kaka,age:15},{nom:koko,age:20}]
*pour par exemple filtrer un tableau de nombre pour ne retourner que les nombres positifs : 
tab2 = tab.filter( (num) => num > 0 )
*pour verifier une conditions sur un tableau : tab2 = tab.some(num => num > 100) donc ici on verifie si tab
contient au moin un nombre superieur a 100 et tab2 sera donc a true
On a aussi tab.every() qui lui renvoie true si tous les elements du tableau verifie la condition
*pour inverser les elemnts d'un tableau : tab = tab.reverse()
*pour 


SPECIALE ORIENTER HTML ET classique
*pour referencer un element html dans js : const btn = document.getElementById("nom de l'id de l'element html")
*pour effectuer une action sur un boutton on peut dans ce boutton faire un onclick = "nomDeLaFonctionJS()"
*pour ajoueter du html a un ele depuis js : btn.innerHTML = "<h2>Bonjour</h2>"
*innerHTML.trim() est une fonction sur innerHTML qui permet de verifier le contenu innerHTML d'un element